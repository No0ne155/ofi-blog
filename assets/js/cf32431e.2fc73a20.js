(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[4890],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return p},kt:function(){return f}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),s=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(r),f=o,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||i;return r?t.createElement(d,a(a({ref:n},p),{},{components:r})):t.createElement(d,a({ref:n},p))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},49290:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var t=r(22122),o=r(19756),i=(r(67294),r(3905)),a=["components"],c={},l="Screencoord",s={unversionedId:"Programmieren-1/Turtlegrafik/screen-coords.nosync",id:"version-25h/Programmieren-1/Turtlegrafik/screen-coords.nosync",isDocsHomePage:!1,title:"Screencoord",description:"Draw the screen coordinates.",source:"@site/versioned_docs/version-25h/04-Programmieren-1/02-Turtlegrafik/900-screen-coords.nosync.md",sourceDirName:"04-Programmieren-1/02-Turtlegrafik",slug:"/Programmieren-1/Turtlegrafik/screen-coords.nosync",permalink:"/25h/Programmieren-1/Turtlegrafik/screen-coords.nosync",editUrl:"https://github.com/lebalz/ofi-blog/edit/main/versioned_docs/version-25h/04-Programmieren-1/02-Turtlegrafik/900-screen-coords.nosync.md",tags:[],version:"25h",sidebarPosition:900,frontMatter:{},sidebar:"version-25h/sidebar",previous:{title:"Turtle Befehle",permalink:"/25h/Programmieren-1/Turtlegrafik/turtle-commands"}},p=[],u={toc:p};function m(e){var n=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"screencoord"},"Screencoord"),(0,i.kt)("p",null,"Draw the screen coordinates."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Screen--coordinates.py",live_py:!0,title:"Screen--coordinates.py"},"from turtle import *\nturtle.set_defaults(\n    canvwidth = 280 * 2,\n    canvheight = 280 * 2\n)\nspeed(100)\ndef grid(xmin: int, xmax: int, ymin: int, ymax: int, tick: int, scale: int = 1):\n    old_pos = getturtle().pos()\n    old_pensize = getturtle().pensize()\n    pensize(1)\n    old_color = getturtle().color()\n    pencolor('lightgray')\n    offset_x = len(str(max(xmax, xmin))) * 2\n    offset_y = len(str(max(ymax, ymin))) * 2\n    for xtick in range(scale * xmin, scale * xmax + 1, tick):\n        penup()\n        goto(xtick + offset_x, scale * ymin - 15)\n        pencolor('black')\n        write(xtick, font=(\"Arial\", 8, \"normal\"), align='right')\n        pencolor('lightgray')\n\n        goto(xtick, scale * ymin)\n        pendown()\n        goto(xtick, scale * ymax)\n\n    for ytick in range(scale * ymin, scale * ymax + 1, tick):\n        penup()\n        goto(scale * xmin - 5, ytick - offset_y + 3)\n        pencolor('black')\n        write(ytick, align='right')\n        pencolor('lightgray')\n        goto(scale * xmin, ytick)\n        pendown()\n        goto(scale * xmax, ytick)\n    penup()\n    goto(*old_pos)\n    pendown()\n    pensize(old_pensize)\n    color(*old_color)\n\ndim = 250\ngrid(-dim, dim, -dim, dim, 25)\n\n# draw x axis\nbackward(250)\nforward(500)\nleft(150)\nforward(20)\nbackward(20)\nright(300)\nforward(20)\npenup()\ngoto(240, -20)\nwrite('x', font=(\"Arial\", 24, \"normal\"))\n\n\n# draw y axis\nhome()\nleft(90)\npendown()\nbackward(250)\nforward(500)\nleft(150)\nforward(20)\nbackward(20)\nright(300)\nforward(20)\npenup()\ngoto(-30, 240)\nwrite('y', font=(\"Arial\", 24, \"normal\"),)\nhome()\n\n")))}m.isMDXComponent=!0}}]);